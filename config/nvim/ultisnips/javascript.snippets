#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#		snippet trigger_word [ "description" [ options ] ]
#		endsnippet

priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet proto
${1:class_name}.prototype.${2:method_name} = function(${3}) {
	${0:${VISUAL}}
};
endsnippet

# Function
snippet fun "function"
function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

# Anonymous Function assigned to variable
snippet vaf
var ${1:function_name} = function(${2}) {
	${0:${VISUAL}}
};
endsnippet

# Function assigned to variable
snippet vf
var ${1:function_name} = function $1(${2}) {
	${0:${VISUAL}}
};
endsnippet

# Immediate function
snippet (f
(function(${1}) {
	${0:${VISUAL}}
}(${2}));
endsnippet

# if
snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# if ... else
snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
	break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

# throw Error
snippet terr
throw new Error('${1:error message}')
endsnippet

# return
snippet ret
return ${0:result};
endsnippet

snippet for "for (...) {...}"
for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forof "for (const prop of object}) { ... }"
for (${1:const} ${2:prop} of ${3:object}) {
	${0}
}
endsnippet

snippet fori
for (let ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (let ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
# For in loop

snippet fori
for (let ${1:prop} in ${2:object}) {
${0:$2[$1]}
}
endsnippet

# Object Method
snippet :f
${1:method_name}: function (${2:attribute}) {
${0:${VISUAL}}
},
endsnippet

# hasOwnProperty
snippet has
hasOwnProperty(${0})
endsnippet

# singleton
snippet sing
function ${1:Singleton} (${2:argument}) {
// the cached instance
var instance;

// rewrite the constructor
$1 = function $1($2) {
	return instance;
};

// carry over the prototype properties
$1.prototype = this;

// the instance
instance = new $1();

// reset the constructor pointer
instance.constructor = $1;

${0}

return instance;
}
endsnippet

# Documentation
# docstring
snippet /**
/**
* ${0:description}
*
*/
endsnippet

snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret
@return {${1:type}} ${0:description}
endsnippet

# JSON.parse
snippet jsonp
JSON.parse(${0:jstr});
endsnippet

# JSON.stringify
snippet jsons
JSON.stringify(${0:object});
endsnippet

# Get elements
snippet get
getElementsBy${1:TagName}('${0}')
endsnippet

# Get element
snippet gett
getElementBy${1:Id}('${0}')
endsnippet

# Elements by class
snippet by.
${1:document}.getElementsByClassName('${0:class}')
endsnippet

# Element by ID
snippet by#
${1:document}.getElementById('${0:element ID}')
endsnippet

# Query selector
snippet qs
${1:document}.querySelector('${0:CSS selector}')
endsnippet

# Query selector all
snippet qsa
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

snippet cl "console.log"
console.log(${0});
endsnippet
snippet cd "console.debug"
console.debug(${0});
endsnippet
snippet ce "console.error"
console.error(${0});
endsnippet
snippet cw "console.warn"
console.warn(${0});
endsnippet
snippet ci "console.info"
console.info(${0});
endsnippet
snippet clstr "console.log stringified"
console.log(JSON.stringify(${0}, null, 2));
endsnippet

# Misc
snippet us
'use strict';
endsnippet

# setTimeout function
snippet timeout
setTimeout(function () {${0}}${2}, ${1:10});
endsnippet

snippet const
const ${1} = ${0};
endsnippet

snippet constn
const ${1} = new ${0};
endsnippet

snippet let
let ${1} = ${0};
endsnippet

snippet im "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet

snippet imas "import * as xyz from 'xyz'"
import * as ${1} from '${2:$1}';
endsnippet

snippet imm "import { member } from 'xyz'"
import { ${1} } from '${2}';
endsnippet

snippet cla
class ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet claext
class ${1} extends ${2} {
	${0:${VISUAL}}
}
endsnippet

snippet clacon
class ${1} {
	constructor(${2}) {
		${0:${VISUAL}}
	}
}
endsnippet

snippet c=>
const ${1:function_name} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet

snippet =>
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet af "() =>"
(${1}) => ${0:${VISUAL}}
endsnippet

snippet afb "() => {}"
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet sym
const ${1} = Symbol('${0}');
endsnippet

snippet expdef
export default ${0}
endsnippet

snippet ${
\${${1}}${2}
endsnippet
