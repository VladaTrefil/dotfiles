set nocompatible              " be iMproved, requiredfiletype off                  " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Plug - Managing Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
Plug 'ayu-theme/ayu-vim'
Plug 'franbach/miramare'
Plug 'morhetz/gruvbox'

Plug 'tpope/vim-commentary'
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'
Plug 'dense-analysis/ale'

Plug 'tpope/vim-fugitive'
Plug 'chrisbra/Colorizer'
Plug 'sheerun/vim-polyglot'
Plug 'ryanoasis/vim-devicons'
Plug 'vifm/vifm.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

Plug 'BurntSushi/ripgrep'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'iloginow/vim-stylus'
Plug 'VladaTrefil/vim-snippets'
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set path+=**					" Searches current directory recursively.
set t_Co=256                    " Set if term supports 256 colors.
set number relativenumber       " Display line numbers

set encoding=utf8
set guifont=Monoid_Nerd_Font_Retina:h11

set hlsearch
set ignorecase
set smartcase

set directory^=$HOME/.vim/tmp//

set clipboard=unnamedplus

" Status bar always visible
set laststatus=2

"Disable safe write for webpack compilation
set backupcopy=yes

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theme Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set termguicolors     " enable true colors support

let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox

" let ayucolor="dark"   " for dark version of theme
" colorscheme ayu

" status bar color
hi StatusLine cterm=bold guibg=#ffffff guifg=#004E98

" au InsertEnter * hi StatusLine term=reverse cterm=bold guibg=#D84F21 guifg=#ffffff
" au InsertLeave * hi StatusLine term=reverse cterm=bold guibg=#004E98 guifg=#ffffff

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FileType Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" autocmd BufNewFile,BufRead *.latte set syntax=html

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text Edit Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set smartindent
set nowrap
set expandtab                   " Use spaces instead of tabs.
set smarttab                    " Be smart using tabs ;)
set shiftwidth=2                " One tab == four spaces.
set tabstop=2                   " One tab == four spaces.
" change spacing for language specific
" autocmd Filetype typescriptreact setlocal ts=2 sts=2 sw=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keybindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap Y y$

noremap } K
noremap { J

noremap H 0
noremap L $
noremap J }
noremap K {

nnoremap <C-c> :nohl<CR><C-w>:echo "Search cleared"<CR>

nnoremap <Space> <Nop>
let mapleader = " "

" Save, quit, force quit
noremap <C-w> :w!<CR>
noremap <C-q> :q<CR>
noremap <Leader>fq :q!<CR>

" toggle spellcheck
map <Leader>ss :setlocal spell!<CR>

" Move to next tab
noremap <Leader>t gt

" Surround visual selection with brackets/parenthesis
vnoremap ' c''<ESC>P
vnoremap " c""<ESC>P
vnoremap ` c``<ESC>P

vnoremap ( c()<ESC>P
vnoremap { c{}<ESC>P
vnoremap [ c[]<ESC>P

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FZF Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}

" Changes fzf highlight
let g:fzf_colors =
\ { "fg":      ["fg", "Normal"],
  \ "bg":      ["bg", "Normal"],
  \ "hl":      ["fg", "IncSearch"],
  \ "fg+":     ["fg", "CursorLine", "CursorColumn", "Normal"],
  \ "bg+":     ["bg", "CursorLine", "CursorColumn"],
  \ "hl+":     ["fg", "IncSearch"],
  \ "info":    ["fg", "IncSearch"],
  \ "border":  ["fg", "Ignore"],
  \ "prompt":  ["fg", "Comment"],
  \ "pointer": ["fg", "IncSearch"],
  \ "marker":  ["fg", "IncSearch"],
  \ "spinner": ["fg", "IncSearch"],
  \ "header":  ["fg", "WildMenu"] }

" Default GFiles, fallback Files if no .git
" function! GFilesFallback()
"   let output = system('git rev-parse --show-toplevel') " Is there a faster way?
"   let prefix = get(g:, 'fzf_command_prefix', '')
"   if v:shell_error == 0
"     exec "normal :" . prefix . "GFiles\<CR>"
"   else
"     exec "normal :" . prefix . "Files\<CR>"
"   endif
"   return 0
" endfunction

let $FZF_DEFAULT_OPTS="--color=dark --layout=reverse --margin=1,1 --color=fg:15,bg:-1,hl:1,fg+:#ffffff,bg+:0,hl+:1 --color=info:0,pointer:12,marker:4,spinner:11"

command! -bang  -complete=dir Files
        \ call fzf#vim#files(<q-args>, { 'options': "$FZF_DEFAULT_OPTS"}, <bang>)

" position FzF
let g:fzf_layout = { 'window': { 'width': 0.4, 'height': 0.25, 'yoffset': 0 } }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set splitbelow
set splitright

nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

nmap <silent> <Leader>" :sp<CR>
nmap <silent> <Leader>% :vsp<CR>

noremap <silent> <Leader>h :vertical resize +3<CR>
noremap <silent> <Leader>l :vertical resize -3<CR>
noremap <silent> <Leader>k :resize +3<CR>
noremap <silent> <Leader>j :resize -3<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colorizer Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <Leader>ch :ColorToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Close Vim if only NERDTree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

nmap <Leader>n :NERDTreeToggle<CR>

let NERDTreeMapOpenSplit="s"
let NERDTreeMapOpenVSplit="v"
let NERDTreeShowLineNumbers=1
let NERDTreeShowHidden=1
let NERDTreeMinimalUI = 1
let g:NERDTreeWinSize=38

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CoC Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-eslint', 
  \ 'coc-prettier', 
  \ 'coc-json', 
  \ ]

command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

imap <C-e> <Plug>(coc-snippets-expand)

" jump between blanks in snippet
let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<Leader><Tab>'

